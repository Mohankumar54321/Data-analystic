# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rnmqCR9EVJ9JxJ1uL-Onj0J2A6xYnj_t
"""

# Step 1: Import Libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score

# Step 2: Load Data
df = pd.read_csv('survey_data.csv')

# Step 3: Explore Basic Info
print(df.head())
print(df.info())
print(df.describe())

# Step 4: Handle Missing Values
df = df.dropna()  # Or use df.fillna(method='ffill') / custom imputation

# Step 5: Correlation Heatmap
plt.figure(figsize=(10,6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Feature Correlation Heatmap")
plt.show()

# Step 6: Feature and Target Separation
X = df.drop('Overall_Satisfaction', axis=1)
y = df['Overall_Satisfaction']

# Optional: Normalize Features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 7: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Step 8: Train Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 9: Model Evaluation
y_pred = model.predict(X_test)
print("RÂ² Score:", r2_score(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))

# Step 10: Feature Importance
importances = model.feature_importances_
features = X.columns
importance_df = pd.DataFrame({'Feature': features, 'Importance': importances})
importance_df = importance_df.sort_values(by='Importance', ascending=False)

# Plot Feature Importances
plt.figure(figsize=(10,6))
sns.barplot(x='Importance', y='Feature', data=importance_df)
plt.title('Key Drivers of Customer Satisfaction')
plt.show()

# Optional: Export Results
importance_df.to_csv('feature_importance_results.csv', index=False)